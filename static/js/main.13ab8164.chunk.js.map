{"version":3,"sources":["components/auth/Login.js","components/auth/NuevaCuenta.js","components/proyectos/Proyectos.js","App.js","serviceWorker.js","index.js"],"names":["Login","useState","email","password","user","setUser","onChange","e","target","name","value","className","htmlFor","type","id","placeholder","NuevaCuenta","Proyectos","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uOA0DeA,EAxDD,WAAO,IAAD,EAGQC,mBAAS,CAC7BC,MAAO,GACPC,SAAU,KALE,mBAGTC,EAHS,KAGHC,EAHG,KAQVC,EAAW,SAACC,GACdF,EAAQ,eACDD,EADA,eAEFG,EAAEC,OAAOC,KAAOF,EAAEC,OAAOE,UAIlC,OACI,yBAAKC,UAAU,gBACX,yBAAKA,UAAU,+BACX,iDACA,8BACI,yBAAKA,UAAU,cACX,2BAAOC,QAAQ,SAAf,SACA,2BACIC,KAAK,QACLC,GAAG,QACHL,KAAK,QACLM,YAAY,WACZL,MAAON,EAAKF,MACZI,SAAUA,KAGlB,yBAAKK,UAAU,cACX,2BAAOC,QAAQ,YAAf,YACA,2BACIC,KAAK,WACLC,GAAG,WACHL,KAAK,WACLM,YAAY,mBACZL,MAAON,EAAKD,SACZG,SAAUA,KAIlB,yBAAKK,UAAU,cACX,2BACIE,KAAK,SACLF,UAAU,6BACVD,MAAM,2BCzCnBM,EANK,WAChB,OACI,kDCIOC,EANG,WACd,OACI,gD,eCcOC,MAZf,WACE,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,YAAYC,UAAWrB,IACzC,kBAAC,IAAD,CAAOmB,OAAK,EAACC,KAAK,yBAAyBC,UAAWL,IACtD,kBAAC,IAAD,CAAOG,OAAK,EAACC,KAAK,sBAAsBC,UAAWJ,OCAvCK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.13ab8164.chunk.js","sourcesContent":["import React, { useState } from 'react';\n\nconst Login = () => {\n\n\n    const [user, setUser] = useState({\n        email: \"\",\n        password: \"\"\n    })\n\n    const onChange = (e) => {\n        setUser({\n            ...user,\n            [e.target.name]: e.target.value\n        })\n    }\n\n    return (\n        <div className=\"form-usuario\">\n            <div className=\"contenedor-form sombra-dark\">\n                <h1>Iniciar Sesión</h1>\n                <form>\n                    <div className=\"campo-form\">\n                        <label htmlFor=\"email\">Email</label>\n                        <input\n                            type=\"email\"\n                            id=\"email\"\n                            name=\"email\"\n                            placeholder=\"Tu Email\"\n                            value={user.email}\n                            onChange={onChange}\n                        />\n                    </div>\n                    <div className=\"campo-form\">\n                        <label htmlFor=\"password\">Password</label>\n                        <input\n                            type=\"password\"\n                            id=\"password\"\n                            name=\"password\"\n                            placeholder=\"Tu contraseña\"\n                            value={user.password}\n                            onChange={onChange}\n                        />\n                    </div>\n\n                    <div className=\"campo-form\">\n                        <input\n                            type=\"submit\"\n                            className=\"btn btn-primario btn-block\"\n                            value=\"Iniciar Sesión\"\n                        />\n                    </div>\n                </form>\n            </div>\n        </div>\n    );\n}\n\nexport default Login;","import React from 'react';\n\nconst NuevaCuenta = () => {\n    return ( \n        <h1>DESDE NuevaCuenta</h1>\n     );\n}\n \nexport default NuevaCuenta;","import React from 'react';\n\nconst Proyectos = () => {\n    return ( \n        <h1>DESDE PROYECTOS</h1>\n     );\n}\n \nexport default Proyectos;","import React from 'react';\nimport Login from \"./components/auth/Login\";\nimport NuevaCuenta from \"./components/auth/NuevaCuenta\";\nimport Proyectos from \"./components/proyectos/Proyectos\";\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\n\nfunction App() {\n  return (\n    <Router>\n      <Switch>\n        <Route exact path=\"/MERNTask\" component={Login} />\n        <Route exact path=\"/MERNTask/nueva-cuenta\" component={NuevaCuenta} />\n        <Route exact path=\"/MERNTask/proyectos\" component={Proyectos} />\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}